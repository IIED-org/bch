{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 *
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'container',
    'mx-auto',
  ]
%}
{{ attach_library('bch_tw/node') }}

{{ attach_library('bch_tw/toc') }}


<article{{ attributes.addClass(classes) }}>


  <div class="grid grid-cols-1 gap-4 py-12 xl:grid-cols-4">
    <aside class="col-span-1">
      <div class="sticky top-4 toc xl:my-6">

          <div class="hidden w-24 h-2 mb-4 md:bg-bc-coral-300 rounded-2xl xl:flex">
          </div>

        {# TOC #}
        <div x-data="{ open: false }" class="mb-6 border border-bc-coral-500 rounded-2xl xl:border-0">
          <div class="flex items-center justify-between px-4 py-2 xl:px-0 xl:py-2"> 
            <h3 class="text-xl lg:text-2xl xl:mb-4">On this page</h3>


            <button @click="open = !open" class="xl:hidden">
              <span x-show="!open">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                  <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
                </svg>
              </span>
              <span x-show="open">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                  <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 15.75 7.5-7.5 7.5 7.5" />
                </svg>
              </span>
            </button>
          </div>


          <div :class="{'block': open, 'hidden': !open}" class="xl:flex lg:space-y-2">
            <nav>
              {{ content.field_table_of_contents }}
            </nav>
          </div>
          
        </div>
        {# End TOC  #}

        <div class="hidden w-24 h-2 mt-4 md:bg-bc-coral-300 rounded-2xl xl:flex">
        </div>

      </div>
    </aside>
    
    <div class="col-span-1 lg:col-span-3">
      <h1 class="page-title">{{ node.label }}</h1>
      <div{{ content_attributes.addClass('node__content') }}>
        <div class="mb-4 prose prose-lg lg:prose-xl">{{ content.field_standfirst }}
        </div>
        {{ content.field_paragraphs}}
      </div>
    </div>
    

  </div>
</article>
